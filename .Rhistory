amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
solve(amatrix$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(z) {
solve(z)
}
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(x)  {
solve(x)
}
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(x)  {
solve(x)
}
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) m <<-solve
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) m <<-solve
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) m <<- solve
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
solve(amatrix$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) {
solve(x$get())
}
#setmean <- function(mean) m <<- mean
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) {
solve(x$get())
}
getinverse <- function(cacheSolve) s <<- cacheSolve
#getmean <- function() m
list(set = set, get = get, getinverse = getinverse)
#     setmean = setmean,
#     getmean = getmean)
}
##
## cacheSolve
##
## Function cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the matrix
## has not changed), then cacheSolve should retrieve the inverse from the cache.
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
data <- x$get()
s <- solve(data, ...)
s
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacgesolve(amatrix)
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(solve) {
solve(x$get())
}
getinverse <- function() s
list(set = set, get = get, getinverse = getinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() s
list(set = set, get = get, getinverse = getinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$s
a
amatrix
a$get()
amatrix$get()
cacheMatrix(amatrix)
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() s
setinverse <- function(sovle) s <<- solve
list(set = set, get = get, getinverse = getinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$setinverse()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() s
setinverse <- function(sovle) s <<- solve
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$setinverse()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$setinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() s
setinverse <- function(cacheSolve) s <<- cacheSolve
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
##
## cacheSolve
##
## Function cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the matrix
## has not changed), then cacheSolve should retrieve the inverse from the cache.
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
data <- x$get()
s <- solve(data, ...)
s
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$setinverse()
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() s
setinverse <- function(s) {
s <<- cacheSolve(x)
}
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
amatrix$setinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() {
cacheSolve(x)
}
setinverse <- function(s) {
s <<- cacheSolve(x)
}
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(x) {
solve(x)
}
setinverse <- function(s) {
s <<- cacheSolve(x)
}
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
solve(x)
solve(amatrix)
solve(amatrix$get())
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(x) {
data <- x$get()
s <- solve(data, ...)
s
}
setinverse <- function(s) {
s <<- cacheSolve(x)
}
list(set = set, get = get, getinverse = getinverse, setinverse = setinverse)
}
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getinverse()
test <- function(mean) m <<- mean
test
test(c(2,3))
test
test(c(4,5))
test <- function() solve(x)
x
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get9)
x$get(
)
test(x)
test(x$get())
test <- function(x) solve(x)
test(x)
test(x$get())
test <- function(x) { data <- x$get()
s <- solve(data)
s
}
test(x)
test
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function(x) {
data <- x$get()
s <- solve(data)
s
}
list(set = set, get = get, getinverse = getinverse)
}
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()
x$getinverse()
getinverse <- function() {
data <- x$get()
s <- solve(data)
s
}
list(set = set, get = get, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() {
data <- x$get()
s <- solve(data)
s
}
list(set = set, get = get, getinverse = getinverse)
}
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$getinverse()
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() {
data <- x
s <- solve(data)
s
}
list(set = set, get = get, getinverse = getinverse)
}
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$getinverse()
x$get()
cacheSolve(x)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getmean()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
s
}
cacheSolve(amatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
s
}
cacheSolve(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() {
data <- x
h <- solve(data)
h
}
list(set = set, get = get, getinverse = getinverse)
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
clear
amatrix
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
# get, set, getinverse
get <- function() x
getinverse <- function() {
data <- x
h <- solve(data)
h
}
list(set = set, get = get, getinverse = getinverse)
}
##
## cacheSolve
##
## Function cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and the matrix
## has not changed), then cacheSolve should retrieve the inverse from the cache.
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
s
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
